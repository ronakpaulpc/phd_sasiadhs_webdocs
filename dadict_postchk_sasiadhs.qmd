---
title: "Pooled DHS data dictionary"
---

# Getting started

First we load the required packages.

```{r}
#| label: load-packages
#| echo: true
#| output: false

easypackages::libraries(
  # Data i/o
  "here",                 # relative file path
  "rio",                  # file import-export
  
  # Data manipulation
  "janitor",              # data cleaning fns
  "haven",                # stata, sas, spss data io
  "labelled",             # var labelling
  "readxl",               # excel sheets
  # "scales",               # to change formats and units
  "skimr",                # quick data summary
  "broom",                # view model results
  
  # Analysis output
  "gt",
  # "modelsummary",          # output summary tables
  "gtsummary",            # output summary tables
  "flextable",            # creating tables from objects
  "officer",              # editing in office docs
  
  # R graph related packages
  "ggstats",
  "RColorBrewer",
  # "scales",
  "patchwork",
  
  # Misc packages
  "tidyverse",            # Data manipulation iron man
  "tictoc"                # Code timing
)

```

Next we turn off scientific notations.

```{r}
#| label: turn-off-scientific-notation
#| echo: true
#| output: false

options(scipen = 999)

```

Next we set the default gtsummary print engine for tables.

```{r}
#| label: set-gtsummary-default
#| echo: true
#| output: false 

theme_gtsummary_printer(print_engine = "flextable")

```

Now we set the flextable output defaults.

```{r}
#| label: set-flextable-default
#| echo: true
#| output: false 

set_flextable_defaults(
  font.size = 11,
  text.align = "left",
  big.mark = "",
  background.color = "white",
  table.layout = "autofit",
  theme_fun = theme_vanilla
)

```

# Document introduction

We document the variable labels and other contents of all variables across all the Afghanistan Demographic and Health Survey (DHS) datasets here. This will be primary document for viewing what variables are available for use in PhD research. We check the variable labels before running the pooling code in "daprep-v01_afdhs.R".

This document contains variable details for the following Afghanistan DHS surveys:

```{r}
#| label: data-import
#| echo: false
#| output: false

# Here we temporarily import the tibbles for sample size table creation
# Importing the afbr nested tibble
afbr_raw <- read_rds(
  file = here("website_data", "afbr1_nest0.rds")
)
# Importing the afir nested tibble
afir_raw <- read_rds(
  file = here("website_data", "afir1_nest0.rds")
)
# Importing the afhr nested tibble
afhr_raw <- read_rds(
  file = here("website_data", "afhr1_nest0.rds")
)
# Importing the afpr nested tibble
afpr_raw <- read_rds(
  file = here("website_data", "afpr1_nest0.rds")
)

```

```{r}
#| label: tbl-detail-survey-rounds
#| echo: true
#| output: true
#| tbl-cap: "Afghanistan DHS datasets and their sample size to be used for pooling"

# Creating the table of surveys to be used for pooling
afbr_raw |> 
  mutate(n_births = prettyNum(n_births, big.mark = ",")) |> 
  select(c(ctr_name, svy_year, n_births)) |> 
  # Join vars from afir_tmp_intro
  left_join(
    afir_raw |> 
      mutate(n_women = prettyNum(n_women, big.mark = ",")) |> 
      select(year, n_women),
    by = join_by(svy_year == year)
  ) |> 
  # Join vars from afhr_tmp_intro
  left_join(
    afhr_raw |> 
      mutate(n_households = prettyNum(n_households, big.mark = ",")) |> 
      select(svy_year, n_households),
    by = join_by(svy_year)
  ) |> 
  # Join vars from afpr_tmp_intro
  left_join(
    afpr_raw |> 
      mutate(n_persons = prettyNum(n_persons, big.mark = ",")) |> 
      select(svy_year, n_persons),
    by = join_by(svy_year)
  ) |> 
  # convert nested tibble to simple tibble
  unnest(cols = c()) |> 
  mutate(
    ccode = row_number(), 
    .before = ctr_name
  ) |> 
  # convert to flextable object
  qflextable() |> 
  align(align = "left", part = "all")

```

Here we will create basic data dictionaries of each datasets using the labelled package. In our earlier efforts we realized that the method for generation data dictionaries for each dataset are similar. Hence, we will create a function using the look_for() command to generate the data dictionaries and view them.

```{r}
#| label: fn-gen-dadict
#| echo: false
#| output: false

# We create a function for generating basic data dictionary
dadict_basic <- function(df) {
  df |> 
  # create data dictionary
  labelled::lookfor(details = "basic") |> 
  # keep only the required columns
  select(-c(pos, levels, value_labels)) |> 
  # for correctly viewing the range column in data dictionary
  labelled::convert_list_columns_to_character()
}

```

# Afghanistan DHS pooled data dictionary

Here we check the variable details of the Afghanistan birth history recode (BR) dataset. We will view the data dictionaries round-wise.

